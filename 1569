class Solution:
    def numOfWays(self, nums: List[int]) -> int:
#         dp = [[1 for r in range(len(nums)+1)] for l in range(len(nums)+1)]
        
#         for i in range(1, len(nums)):
#             for j in range(1, len(nums)):
#                 dp[i][j] = (dp[i][j-1] + dp[i-1][j])
#         print(dp)
        
#         return (self.getNum(nums, dp) - 1)%(10**9+7)
    
#     def getNum(self, nums, dp):
#         if len(nums) <= 2:
#             return 1
#         left, right = [num for num in nums if num < nums[0]], [num for num in nums if num > nums[0]]
#         return self.getNum(left, dp) * dp[len(left)][len(right)] * self.getNum(right, dp)

        def f(nums):
            if len(nums) <= 2: return 1
            left = [v for v in nums if v < nums[0]]
            right = [v for v in nums if v > nums[0]]
            return comb(len(left) + len(right), len(right)) * f(left) * f(right)
        return (f(nums)-1) % (10 ** 9 + 7)
    
