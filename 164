class Solution:
    def maximumGap(self, A: List[int]) -> int:
        # Naive, O(nlogn)
        # A.sort()
        # res = 0
        # for i in range(1, len(A)):
        #     res = max(res, A[i] - A[i - 1])
        # return res
        
        # Bucket sorting, O(n)
        if len(A) < 2 or min(A) == max(A): return 0
        a, b = min(A), max(A)
        size = (b - a) // (len(A) - 1) or 1
        bucket = [[None, None] for _ in range((b - a) // size + 1)]
        # print(bucket)
        for n in A:
            b = bucket[(n - a) // size]
            b[0] = n if b[0] is None else min(b[0], n)
            b[1] = n if b[1] is None else max(b[1], n)
        # print(bucket)
        bucket = [b for b in bucket if b[0]]
        return max(bucket[i][0] - bucket[i - 1][1] for i in range(1, len(bucket)))
