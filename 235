# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        # 1. recursion:
        def helper(root, p, q):
            cur_val, p_val, q_val = root.val, p.val, q.val
            if p_val > cur_val and q_val > cur_val:
                return helper(root.right, p, q)
            elif p_val < cur_val and q_val < cur_val:
                return helper(root.left, p, q)
            else:
                return root
        return helper(root, p, q)
    
        # 2. iteration:
        p_val, q_val = p.val, q.val
        node = root
        while node:
            cur_val = node.val
            if p_val > cur_val and q_val > cur_val:
                node = node.right
            elif p_val < cur_val and q_val < cur_val:
                node = node.left
            else:
                return node
        
