class NumMatrix:
    def __init__(self, matrix):  # Creat a preSum matrix for each row
        self.matrix = matrix
        for row in matrix:
            for i in range(1,len(row)):
                row[i] += row[i - 1]

    def update(self, row: int, col: int, val: int) -> None:
        orig = self.matrix[row][col] - (self.matrix[row][col - 1] if col >= 1 else 0)
        for j in range(col, len(self.matrix[0])):
            self.matrix[row][j] += val - orig

    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
        return sum(self.matrix[i][col2] - (self.matrix[i][col1 - 1] if col1 >= 1 else 0) for i in range(row1, row2 + 1))

matrix = [
[3, 0, 1, 4, 2],
[5, 6, 3, 2, 1],
[1, 2, 0, 1, 5],
[4, 1, 0, 1, 7],
[1, 0, 3, 0, 5]
]

N = NumMatrix(matrix)
print(N.sumRegion(2, 1, 4, 3))
N.update(3, 2, 2)
print(N.sumRegion(2, 1, 4, 3))
