class Solution:
    def shipWithinDays(self, weights: List[int], D: int) -> int:
#         1. binary search to find result, with left and right are max(weights) and sum(weights);
#         2. for each mid point:
#             2.1. start with current weight and count as 0, 1;
#             2.2. for each weight:
#                 2.2.1. if we add current and weight, and > mid, we need to add count += 1, and set current to weight;
#                 2.2.2. else we just add current with weight;
#             2.3. if count <= D, we can search left side, set right = mid;
#             2.4. else, set left = mid + 1
#         3. return left as result.
#         Time: O(nlog(sum(weights)-max(weights))), Space: O(1)
        
        left, right = max(weights), sum(weights)
        while left < right:
            mid = (left + right) >> 1
            cur, count = 0, 1
            for w in weights:
                if cur + w > mid:
                    count += 1
                    cur = 0
                cur += w
            if count <= D:
                right = mid
            else:
                left = mid + 1
        return left
    
