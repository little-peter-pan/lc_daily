class Solution:
    def balancedString(self, s: str) -> int:
        # 1. count frequency of letters in s, and calculate extra frequency for each letter, store in extras;
        # 2. sliding window operations, start from i = j = 0, res = len(s):
        #     2.1. for each j in range(len(s)), if s[j] is in extra, subtract 1 from extra[s[j]];
        #     2.2. check while max freqs in extras are == 0 (which means sliding window s[i, j] now covers all extra letters, but is not necessarily minimum length):
        #         2.2.1. update res with min(res, j - i + 1);
        #         2.2.2. check if s[i] is in extras: if so, update extras[s[i]] += 1;
        #         2.2.3. update i += 1, and repeat 2.2;
        #     2.3. repeat 2.1 and 2.2 for each j, so that result will keep updating minimum sliding window;
        # 3. return result.
        # Time: O(n), Space: O(1)
        
        counts = Counter(s)
        n = len(s) // 4
        extras = {}
        for c in counts:
            if counts[c] > n:
                extras[c] = counts[c] - n
        if not extras: return 0
        i, res = 0, len(s)
        for j in range(len(s)):
            if s[j] in extras:
                extras[s[j]] -= 1
            while max(extras.values()) == 0:
                res = min(res, j - i + 1)
                if s[i] in extras:
                    extras[s[i]] += 1
                i += 1
        return res
        
