class Solution:
    def minEatingSpeed(self, piles: List[int], h: int) -> int:
#         1. binary search for best result. The searching range is [1, max(piles)];
#         2. for each mid point, check if it can be used to consume piles within h hours, which is sum of ceil(pile / mid) <= h;
#         3. return left as result.
#         Time: O(nlogm), m is max(piles); Space: O(1)
                
        def helper(speed):
            return sum((pile - 1) // speed + 1 for pile in piles) <= h
        
        left, right = 1, max(piles)
        while left < right:
            mid = (left + right) // 2
            if helper(mid):
                right = mid
            else:
                left = mid + 1
        return left
    
