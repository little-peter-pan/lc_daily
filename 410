class Solution:
    def splitArray(self, nums: List[int], m: int) -> int:    
        def helper(limit):
            count, total = 1, 0
            for num in nums:
                total += num
                if total > limit:
                    total = num
                    count += 1
                    if count > m: return False
            return True
        
        left, right = max(nums), sum(nums)
        while left < right:
            mid = (left + right) // 2
            if helper(mid):
                right = mid
            else:
                left = mid + 1
        return left

#         cums = [0]
#         for x in nums:
#             cums.append(cums[-1]+x)
#         cache = defaultdict(dict)            
#         return self.helper(0, nums, m, cache, cums)
    
#     def helper(self, i, nums, m, cache, cums):
#         if i == len(nums):
#             return 0
#         elif m == 1:
#             return sum(nums[i:])
#         else:
#             if i in cache and m in cache[i]:
#                 return cache[i][m]
#             cache[i][m] = float('inf')
#             for j in range(1, len(nums) - i):
#                 left, right = cums[i + j] - cums[i], self.helper(i + j, nums, m - 1, cache, cums)
#                 cache[i][m] = min(cache[i][m], max(left, right))
#                 if left > right:
#                     break
#             return cache[i][m]
