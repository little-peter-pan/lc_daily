# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
#         total = len(lists)
#         interval = 1
#         while interval < total:
#             for i in range(0, total - interval, interval * 2):
#                 lists[i] = self.merge(lists[i], lists[i + interval])
#             interval *= 2
#         return lists[0] if total else None
    
        
#     def merge(self, l1, l2):
#         dummy = prev = ListNode(None)
#         h1, h2 = l1, l2
#         while h1 and h2:
#             if h1.val < h2.val:
#                 prev.next = h1
#                 h1 = h1.next
#             else:
#                 prev.next = h2
#                 h2 = h2.next
#             prev = prev.next
#         if h1:
#             prev.next = h1
#         if h2:
#             prev.next = h2
#         return dummy.next

        # self.nodes = []
        # head = point = ListNode(0)
        # for l in lists:
        #     while l:
        #         self.nodes.append(l.val)
        #         l = l.next
        # for x in sorted(self.nodes):
        #     point.next = ListNode(x)
        #     point = point.next
        # return head.next
        
        ListNode.__lt__ = lambda a, b: a.val < b.val
        from heapq import heappush, heappop
        heap = []
        dummy = node = ListNode(None)
        for l in lists:
            if l: heappush(heap, l)
        while heap:
            cur = heappop(heap)
            node.next = cur
            node = node.next
            if cur.next:
                heappush(heap, cur.next)
        return dummy.next
    
