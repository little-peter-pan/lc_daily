class Solution:
    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:
#         1. start from index = 0, keep recording sum of satisfied customers without grumpy (no_grumpy), sum of unsatisfied customers in current technique window of [index-X+1, index] (cur_window), and max of current window (max_window).
#         2. for each pair of customers/c and grumpy/g:
#             2.1. keep adding satisfied customer (c * (1 - g)) to no_grumpy;
#             2.2. add current unsatisfied customer (c * g) and remove first position unsatisfied customer (customers[index - X] * grumpy[index - X]) to maintain cur_window;
#             2.3. record max_window as max(max_window, cur_window)
#             2.4. index += 1
#         3. result will be no_grumpy + max_window
#         Time: O(n), Space: O(1)
        
        idx = no_grumpy = cur_window = max_window = 0
        for c, g in zip(customers, grumpy):
            no_grumpy += c * (1 - g)
            cur_window += c * g
            if idx >= X:
                cur_window -= customers[idx - X] * grumpy[idx - X]
            max_window = max(max_window, cur_window)
            idx += 1
        return no_grumpy + max_window
    
