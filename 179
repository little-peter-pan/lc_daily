class Solution:
    def largestNumber(self, nums: List[int]) -> str:
        '''
        #1. bubble sort
        for i in range(len(nums) - 1, 0, -1):
            for j in range(i):
                if str(nums[j + 1]) + str(nums[j]) > str(nums[j]) + str(nums[j + 1]):
                    nums[j], nums[j + 1] = nums[j + 1], nums[j]
        return str(int(''.join(map(str, nums))))
        
        #2. selection sort
        for i in range(len(nums) - 1, 0, -1):
            index = 0
            for j in range(i + 1):
                if str(nums[index]) + str(nums[j]) > str(nums[j]) + str(nums[index]):
                    index = j
            nums[i], nums[index] = nums[index], nums[i]
        return str(int(''.join(map(str, nums))))
        
        #3. insertion sort
        for i in range(len(nums)):
            index, cur = i, nums[i]
            while index > 0 and str(cur) + str(nums[index - 1]) > str(nums[index - 1]) + str(cur):
                nums[index] = nums[index - 1]
                index -= 1
            nums[index] = cur
        return str(int(''.join(map(str, nums))))
        
        #4. merge sort
    
        def merge_sort(nums, left, right):
            if left > right:
                return
            if left == right:
                return [nums[left]]
            mid = left + (right - left) // 2
            left = merge_sort(nums, left, mid)
            right = merge_sort(nums, mid + 1, right)
            return merge(left, right)
        
        def merge(list1, list2):
            res, i, j = [], 0 , 0
            while i < len(list1) and j < len(list2):
                if str(list1[i]) + str(list2[j]) > str(list2[j]) + str(list1[i]):
                    res.append(list1[i])
                    i += 1
                else:
                    res.append(list2[j])
                    j += 1
            res.extend(list1[i:] or list2[j:])
            return res
        
        nums = merge_sort(nums, 0, len(nums) - 1)
        return str(int(''.join(map(str, nums))))
        '''
        #5. quick sort
        
        def quick_sort(nums, left, right):
            if left >= right:
                return
            pivot = partition(nums, left, right)
            quick_sort(nums, left, pivot - 1)
            quick_sort(nums, pivot + 1, right)
        
        def partition(nums, left, right):
            index = left
            while left < right:
                if str(nums[left]) + str(nums[right]) > str(nums[right]) + str(nums[left]):
                    nums[left], nums[index] = nums[index], nums[left]
                    index += 1
                left += 1
            nums[index], nums[right] = nums[right], nums[index]
            return index
        
        quick_sort(nums, 0, len(nums) - 1)
        return str(int(''.join(map(str, nums))))
    
