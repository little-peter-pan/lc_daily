class newNode: 
  
    # Constructor to create a new node 
    def __init__(self, data): 
        self.val = data 
        self.left = None
        self.right = None

root = newNode(50) 
root.left     = newNode(10) 
root.right     = newNode(60) 
root.left.left = newNode(5) 
root.left.right = newNode(20) 
root.right.left = newNode(55)
root.right.left.left = newNode(45) 
root.right.right = newNode(70)
root.right.right.left = newNode(65) 
root.right.right.right = newNode(80)

class Solution(object):
    def largestBSTSubtree(self, root):
      if root is None:
        return 0
      res = [1]

      def helper(root):
        if not root.left and not root.right:
          return 1, root.val, root.val

        left_size, left_min, left_max = 0, float('inf'), -float('inf')
        if root.left:
          left_size, left_min, left_max = helper(root.left)

        right_size, right_min, right_max = 0, float('inf'), -float('inf')
        if root.right:
          right_size, right_min, right_max = helper(root.right)

        size = 0
        if (not root.left or left_size > 0) and \
           (not root.right or right_size > 0) and \
           left_max < root.val < right_min:
          size = 1 + left_size + right_size
          res[0] = max(res[0], size)
        return size, left_min, right_max
      
      helper(root)
      return res[0]

s = Solution()
print(s.largestBSTSubtree(root))
