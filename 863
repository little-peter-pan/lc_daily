# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def distanceK(self, root: TreeNode, target: TreeNode, K: int) -> List[int]:
#         def dfs(node, par = None):
#             if node:
#                 node.par = par
#                 dfs(node.left, node)
#                 dfs(node.right, node)
        
#         dfs(root)
#         q = deque([(target, 0)])
#         seen = {target}
#         while q:
#             if q[0][1] == K:
#                 return [node.val for node, d in q]
#             node, d = q.popleft()
#             for n in (node.left, node.right, node.par):
#                 if n and n not in seen:
#                     seen.add(n)
#                     q.append((n, d + 1))
#         return []

        def dfs(node):
            if not node: return -1
            elif node is target:
                add(node, 0)
                return 1
            else:
                l, r = dfs(node.left), dfs(node.right)
                if l != -1:
                    if l == K:
                        res.append(node.val)
                    add(node.right, l + 1)
                    return l + 1
                elif r != -1:
                    if r == K:
                        res.append(node.val)
                    add(node.left, r + 1)
                    return r + 1
                else:
                    return -1
        
        def add(node, d):
            if not node: return
            elif d == K:
                res.append(node.val)
            else:
                add(node.left, d + 1)
                add(node.right, d + 1)
        
        res = []
        dfs(root)
        return res
    
