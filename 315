class Tree:  # Creat a binary index tree (BIT)
    def __init__(self, n):
        self.sums = [0] * (n + 1)
    
    def update(self, i, val):
        while i < len(self.sums):
            self.sums[i] += 1
            i += i & -i

    def sum(self, i):
        res = 0
        while i > 0:
            res += self.sums[i]
            i -= i & -i
        return res
        
class Solution:
    def countSmaller(self, nums: List[int]) -> List[int]:
        dic = {v: i for i, v in enumerate(sorted(set(nums)))}  # Create a ranking dic to record nums from low to high
        tree = Tree(len(dic))
        res = []
        for i in range(len(nums) - 1, -1, -1):
            res.append(tree.sum(dic[nums[i]]))  # For each number from right, get BIT sum for its rank (count of smaller numbers)
            tree.update(dic[nums[i]] + 1, i)  # Add itself to BIT
        return res[::-1]
    
