class Node:  # Segment tree to store interval[start:end] and its total
    def __init__(self, start, end):
        self.start = start
        self.end = end
        self.total = 0
        self.left = None
        self.right = None
        
class NumArray:
    def __init__(self, nums: List[int]):
        def createTree(nums, l, r):  # Create a tree for nums. O(n)
            if l > r:
                return None
            if l == r:
                n = Node(l, r)
                n.total = nums[l]
                return n
            mid = (l + r) // 2
            root = Node(l, r)
            root.left = createTree(nums, l, mid)
            root.right = createTree(nums, mid + 1, r)
            root.total = root.left.total + root.right.total
            return root
        self.root = createTree(nums, 0, len(nums) - 1)

    def update(self, index: int, val: int) -> None:
        def helper(root, i, val):  # Update value. O(logn)
            if root.start == root.end:  # Update leaf node
                root.total = val
                return val
            mid = (root.start + root.end) // 2
            if i <= mid:
                helper(root.left, i, val)
            else:
                helper(root.right, i, val)
            root.total = root.left.total + root.right.total  # Update branch nodes
            return root.total
        return helper(self.root, index, val)

    def sumRange(self, left: int, right: int) -> int:
        def helper(root, l, r):  # Calculate sum. O(logn)
            if root.start == l and root.end == r: return root.total
            mid = (root.start + root.end) // 2
            if r <= mid:  # Entire range is in root.left
                return helper(root.left, l, r)
            elif l >= mid + 1:  # Entire range in root.right
                return helper(root.right, l, r)
            else:  # Split range into [l, mid] and [mid + 1, r]
                return helper(root.left, l, mid) + helper(root.right, mid + 1, r)
        return helper(self.root, left, right)

# Your NumArray object will be instantiated and called as such:
# obj = NumArray(nums)
# obj.update(index,val)
# param_2 = obj.sumRange(left,right)
